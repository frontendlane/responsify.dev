/* reset */
:root {
    --outline-width: .25em;
    --outline-offset: calc(var(--outline-width) / 2);
    --scroll-margin-block-start: .5em;
    --scroll-margin-block-end: 1.5em;
    --heading-multiplier: 1.08;
}

h1 {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^15 */
}

h2 {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^10 */
}

h3 {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^6 */
}

h4 {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important; /* multiplier^3 */
}

h5 {
    font-size: calc(1em * var(--heading-multiplier)) !important; /* multiplier^1 */
}

h6 {
    font-size: 1em !important; /* multiplier^0 */
}

* {
    scroll-margin-block-start: var(--scroll-margin-block-start);
    scroll-margin-block-end: var(--scroll-margin-block-end);
}

:not(form):not(:placeholder-shown):invalid {
    box-shadow: 0 0 0 var(--outline-offset) red;
}

*,
::before,
::after {
    box-sizing: border-box;
    margin: 0;
}

:focus-visible {
    outline: var(--outline-width) dashed currentColor;
    outline-offset: var(--outline-offset);
    z-index: 1;
}

input,
textarea {
    font-family: inherit;
    line-height: inherit;
}

img,
video {
    display: block;
}

button:not([disabled]),
label[for]:not([for=""]),
label[for]:not([for=""]) *,
input[type="checkbox"]:not([disabled]),
input[type="radio"]:not([disabled]),
summary {
    cursor: pointer;
}

body {
    font-size: 1rem;
    text-size-adjust: 100%;
}

button,
input:not([type]),
input[type="text"],
input[type="number"],
input[type="checkbox"],
input[type="radio"],
code,
kbd,
select {
    font-size: 1em;
}

button {
    font-family: inherit;
    color: inherit; /* fix for button:active on Safari */
}

a {
    color: inherit; /* match <html> color, fix for currentColor */
}

a[href]:not([href=""])[target="_blank"]::after {
    content: " ↗️"; /* Firefox & Safari fallback */
    content: " ↗️" / "external link";
    font-size: .5em;
    vertical-align: top;
}
a[href]:not([href=""])[data-fileFormat]:not([data-fileFormat=""]):not([data-fileSize])[data-fileSize=""]::after {
    content: " (" attr(data-fileFormat) ")";
}
a[href]:not([href=""])[data-fileSize]:not([data-fileSize=""]):not([data-fileFormat])[data-fileFormat=""]::after {
    content: " (" attr(data-fileSize) ")";
}
a[href]:not([href=""])[data-fileFormat]:not([data-fileFormat=""])[data-fileSize]:not([data-fileSize=""])::after {
    content: " (" attr(data-fileFormat) ", " attr(data-fileSize) ")";
}
a[href]:not([href=""])::after {
    white-space: pre; /* ensures ::after doesn't break onto a separate line of its own */
}

summary::marker {
    white-space: normal; /* eliminates white space between arrow and text */
}

/* specifics */
:root {
    --vertical-spacing: 1em;
    --horizontal-spacing: 2ch;
    --block-border-radius: .5em;
    --inline-border-radius: .25em;
    --wide-enough: 123vw;

    --white: #fff;
    --black: #080808;
    --near-black: #181818;
    --dark: #202020;
    --light: #e0e0e0;
    --near-white: #eee;
    --code-background-dark: #2a2d2e;
    --code-color-dark: #ff9359;
}

html {
    background-color: var(--near-white); /* always set a background color on html for when users scroll beyong the page content, also in cases when the content doesn't cover all of the page */
    color: var(--dark); /* i forgot why but i remember concluding that it's a good practice to set a color whenever setting a background-color and vice-versa */
    /* TODO: investigate if this is the best font stack for me */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}
@media (prefers-color-scheme: dark) {
    html {
        background-color: var(--dark);
        color: var(--light);
    }
}

body {
    margin-block: calc(var(--vertical-spacing) * 2);
    line-height: 1.35;
}

body > :not(.example-div) {
    max-inline-size: 75ch; /* always set *some* kind of limit on width - either on body or elsewhere - because text is difficult to read if the lines are too long: https://www.joshwcomeau.com/css/full-bleed/; */
    margin-inline: auto;
    /* TODO: this is an iOS Safari bug: not recognizing padding-inline with var() value */
    padding-inline: var(--horizontal-spacing);
    padding-inline: 2ch;
}

.example-div {
    margin-inline: auto;
    border-radius: var(--block-border-radius);
    padding: calc(var(--vertical-spacing) / 2) var(--horizontal-spacing);
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: .25em;
    background-color: var(--black);
}
@media (prefers-color-scheme: dark) {
    .example-div {
        background-color: var(--light);
    }
}
@media (min-width: 900px) {
    .example-div {
        inline-size: calc(6300px - 600%);
        background-color: var(--dark);
    }
}
@media (prefers-color-scheme: dark) and (min-width: 900px) {
    .example-div {
        background-color: var(--white);
    }
}
@media (min-width: 1000px) {
    .example-div {
        inline-size: 30%;
        background-color: var(--black);
    }
}
@media (prefers-color-scheme: dark) and (min-width: 1000px) {
    .example-div {
        background-color: var(--light);
    }
}

.example-div:empty::before {
    content: "width: 100%;";
    display: inline-block;
    white-space: pre-wrap; /* ensures there's a white-space at the end of a line if text breaks into multiple lines */
    border-radius: var(--inline-border-radius);
    padding-inline: .25ch;
    background-color: var(--code-background-dark);
    color: #ffa26b;
    font-family: monospace;
}
@media (prefers-color-scheme: dark) {
    .example-div:empty::before {
        color: var(--code-color-dark);
    }
}
@media (min-width: 900px) {
    .example-div:empty::before {
        content: "width: calc(6300px - 600%);";
    }
}
@media (min-width: 1000px) {
    .example-div:empty::before {
        content: "width: 30%;";
    }
}

.inline-code {
    white-space: pre-wrap; /* ensures there's a white-space at the end of a line if text breaks into multiple lines */
    border-radius: var(--inline-border-radius);
    padding-inline: .25ch;
    background-color: var(--code-background-dark);
    color: #ffa26b;
}
@media (prefers-color-scheme: dark) {
    .inline-code {
        color: var(--code-color-dark);
    }
}

.header {
    margin-block-start: calc(var(--vertical-spacing) * 2);
}

.paragraph {
    margin-block-start: var(--vertical-spacing);
}

.main {
    margin-block-start: calc(var(--vertical-spacing) * 2);
}

.details {
    --details-vertical-spacing: calc(var(--vertical-spacing) / 2);
    --details-horizontal-spacing: calc(var(--horizontal-spacing) / 2);

    max-inline-size: 100%;
    display: inline-block;
    background-color: var(--white);
    border: 1px solid var(--dark);
    border-radius: var(--block-border-radius);
}
@media (prefers-color-scheme: dark) {
    .details {
        border-color: var(--light);
        background-color: var(--black);
    }
}

.details:not([open]):active {
    background-color: transparent;
}

.details[open] {
    background-color: transparent;
    padding: var(--details-vertical-spacing) var(--details-horizontal-spacing);
}
@media (min-width: 600px) {
    .section-details[open] {
        /* TODO: update the comment to mention 1ch */
        padding-inline: calc(-1ch + 2.967vw); /* Responsified - viewport lower bound: 600px; viewport upper bound: 900px; element lower bound: 8.9px; element upper bound: 17.8px; */
    }
}
@media (min-width: 900px) {
    .section-details[open] {
        padding: var(--vertical-spacing) var(--horizontal-spacing);
    }
}

.details .summary {
    display: inline flow-root list-item;
    padding: var(--details-vertical-spacing) var(--details-horizontal-spacing);
}
@media (min-width: 600px) {
    .section-details .summary {
        /* TODO: update the comment to mention 1ch */
        padding-inline: calc(-1ch + 2.967vw); /* Responsified - viewport lower bound: 600px; viewport upper bound: 900px; element lower bound: 8.9px; element upper bound: 17.8px; */
    }
}
@media (min-width: 900px) {
    .section-details .summary {
        padding: var(--vertical-spacing) var(--horizontal-spacing);
    }
}
.details[open] .summary {
    transform: translate3d(calc(0px - var(--details-horizontal-spacing)), calc(0px - var(--details-vertical-spacing)), 0);
}
@media (min-width: 600px) {
    .section-details[open] .summary {
        /* TODO: update the comment to mention 1ch */
        transform: translate3d(calc(0px - (-1ch + 2.967vw)), calc(0px - var(--details-vertical-spacing)), 0); /* Responsified - viewport lower bound: 600px; viewport upper bound: 900px; element lower bound: 8.9px; element upper bound: 17.8px; */
    }
}
@media (min-width: 900px) {
    .section-details[open] .summary {
        transform: translate3d(calc(0px - var(--horizontal-spacing)), calc(0px - var(--vertical-spacing)), 0);
    }
}

.summary-heading-1::marker {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^15 */
}

.summary-heading-2::marker {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^10 */
}

.summary-heading-3::marker {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important;  /* multiplier^6 */
}

.summary-heading-4::marker {
    font-size: calc(1em * var(--heading-multiplier) * var(--heading-multiplier) * var(--heading-multiplier)) !important; /* multiplier^3 */
}

.summary-heading-5::marker {
    font-size: calc(1em * var(--heading-multiplier)) !important; /* multiplier^1 */
}

.summary-heading-6::marker {
    font-size: 1em !important; /* multiplier^0 */
}

.heading-summary {
    display: inline; /* inline instead of inline-block to prevent heading being on a separate line from ::marker */
}

.doge {
    display: inline;
    block-size: 1em;
    inline-size: auto;
    vertical-align: top;
}

.list {
    padding: var(--vertical-spacing) 0 0 var(--horizontal-spacing);
}

.list-item +:not(:first-of-type) {
    margin-block-start: calc(var(--vertical-spacing) / 2);
}

.code-block {
    overflow-x: auto;
    margin-block-start: var(--vertical-spacing);
    border-radius: var(--block-border-radius);
    background-color: var(--code-background-dark);
    color: #ffa26b;
}
@media (prefers-color-scheme: dark) {
    .code-block {
        color: var(--code-color-dark);
    }
}

.code-block-code {
    display: inline-block;
    padding: var(--vertical-spacing) .75em;
}

.video {
    max-inline-size: 100%;
    border-radius: min(calc(0.345px + 0.517vw), 5px); /* Responsified - viewport lower bound: 320px; viewport upper bound: 900px; element lower bound: 2px; element upper bound: 5px; */
    margin-block-start: var(--vertical-spacing);
}

.section {
    margin-block-start: calc(var(--vertical-spacing) * 2);
}

.form-container {
    position: relative; /* needed for :active, :focus-within but placed here because <select> doesn't open on first click otherwise */
    pointer-events: none;
}

.form-container :where(.label, .input, .select, .checkbox-container, .button, .output) {
    pointer-events: all; /* no way to revert the cursor on .generate that changed from "text" to "default" */
}

.form-container:active,
.form-container:focus-within {
    z-index: 1;
    background-color: var(--light);
    box-shadow: 0 0 0 var(--vertical-spacing) var(--light), 0 0 0 calc(var(--vertical-spacing) + var(--outline-width)) var(--dark), 0 0 0 12345vmax #eeeeeebf; /* #eeeeeebf === var(--near-white) + alpha */
    border-radius: var(--block-border-radius);
}
@media (prefers-color-scheme: dark) {
    .form-container:active,
    .form-container:focus-within {
        background-color: var(--near-black);
        box-shadow: 0 0 0 var(--vertical-spacing) var(--near-black), 0 0 0 calc(var(--vertical-spacing) + var(--outline-width)) var(--light), 0 0 0 12345vmax #202020bf; /* #202020bf === var(--dark) + alpha */
    }
}

.heading-container {
    position: relative;
}

.screen-reader-heading {
    position: absolute;
    inset-block-start: 0;
    inset-inline-start: 0;
    color: transparent;
    background-color: transparent;
    z-index: -1;
}

.noscript {
    display: block;
    margin-block: var(--vertical-spacing);
    padding-block: var(--vertical-spacing);
    border-block: .5em double;
    text-align: center;
}

.js-error {
    margin-block: calc(var(--vertical-spacing) * 2);
    padding-block: var(--vertical-spacing);
    border-block: .5em double;
}

.step-container {
    display: flex; /* display: flex; on <li> removes ::marker so a div inside the <li> is needed */
    align-items: flex-end;
    flex-wrap: wrap;
}

.label {
    margin-inline-end: 1.5ch; /* margin goes on label instead of input because of possible wrapping and we want to avoid margin on the new line */
}

.input {
    padding: 0 .25ch;
    color: var(--dark);
    background-color: var(--white);
    border: 1px solid #dadada;
}
@media (prefers-color-scheme: dark) {
    .input {
        color: var(--light);
        background-color: var(--black);
        /* TODO: add --input-border-color: #4d4d4d; */
        border-color: #4d4d4d;
    }
}
.input[disabled] {
    border-color: var(--black);
    opacity: .15;
}
@media (prefers-color-scheme: dark) {
    .input[disabled] {
        border-color: revert;
        opacity: .3;
    }
}
.input::placeholder {
    color: inherit;
    opacity: .15;
    font-style: italic;
}
@media (prefers-color-scheme: dark) {
    .input::placeholder {
        opacity: .3;
    }
}
.input[disabled]::placeholder {
    opacity: 1;
}

.css-property {
    --longest-css-property-length: 27ch;

    max-inline-size: var(--longest-css-property-length);
    flex-grow: 1;
}

.input[type="number"] {
    --number-size-limit: 4ch;
    --precision-separator: 1ch;
    --precision-digits: 2ch;
    --stepper-width: 25px;

    max-inline-size: calc(var(--number-size-limit) + var(--precision-separator) + var(--precision-digits) + var(--stepper-width));
    margin-inline-end: .25ch;
}

.flex-wrap-joiner {
    display: flex;
    align-items: flex-end;
    flex-wrap: wrap;
}

.select {
    font-family: monospace;
    padding-inline: .25ch;
    background-color: var(--white);
    color: var(--dark);
    border: 1px solid #dadada;
}
@media (prefers-color-scheme: dark) {
    .select {
        background-color: var(--black);
        color: var(--light);
        border-color: #4d4d4d;
    }
}

.select[disabled] {
    opacity: .3;
    border-color: revert;
}

.checkbox-container {
    display: inline-block;
    margin-block-start: var(--vertical-spacing);
    background-color: var(--white);
    border: 1px solid #dadada;
    border-radius: var(--block-border-radius);
    padding: .5em;
}
@media (prefers-color-scheme: dark) {
    .checkbox-container {
        background-color: var(--black);
        border-color: #4d4d4d;
    }
}

.checkbox-container:active {
    background-color: var(--near-white);
}
@media (prefers-color-scheme: dark) {
    .checkbox-container:active {
        background-color: var(--near-black);
    }
}

.checkbox-container[disabled] {
    opacity: .3;
    border-color: revert;
}

.button {
    --padding: .75em;

    display: block;
    margin-block-start: var(--vertical-spacing);
    border: 1px solid;
    padding: var(--padding);
    background-color: var(--white);
    border-radius: var(--block-border-radius);
}
.button:not([disabled]):active {
    background-color: transparent;
    transform: translate3d(1px, 1px, 0);
}
@media (prefers-color-scheme: dark) {
    .button {
        color: var(--light);
        background-color: var(--black);
    }
}

.button[disabled] {
    opacity: .3;
}

.output {
    --notification-height: 1em;
    --notification-offset: .5em;

    display: block;
    text-align: center;
    position: relative;
    max-inline-size: 100%;
}

.output:not(:empty) {
    margin-block-start: calc(var(--vertical-spacing) + var(--notification-height) + var(--notification-offset) + var(--outline-width) + var(--outline-offset));
}

.notification {
    --arrow-size: 1em;
    --arrow-offset: var(--outline-offset);
    --arrow-pedestal: .25em;

    position: absolute;
    border-block-end: var(--arrow-pedestal) solid transparent;
    padding: 0 .5ch;
    inset-block-start: 0;
    inset-inline-start: 50%;
    transform: translate3d(-50%, calc((100% + var(--outline-offset) + var(--outline-width) + var(--arrow-offset) + var(--arrow-size) / 2) * -1), 0);
}
.notification:not(:empty) {
    border-block-end-color: currentColor;
}

.notification:not(:empty)::before {
    content: "";
    display: block;
    position: absolute;
    inset-block-end: calc(var(--arrow-pedestal) * -1);
    inset-inline-start: 50%;
    transform: translate3d(-50%, 100%, 0);
    background-color: currentColor;
    inline-size: var(--arrow-size);
    block-size: var(--arrow-size);
    clip-path: polygon(0 0, 100% 0, 50% 50%);
}

.kbd {
    padding-inline: .25ch;
    border-radius: var(--inline-border-radius);
    background-color: var(--code-background-dark);
    color: yellow;
}

.result-container {
    margin-block-start: 0;
}

.result {
    display: inline-block;
    padding: var(--vertical-spacing) .75em;
    font-size: 1.5em;
}

.details-separator {
    margin-block-start: calc(var(--vertical-spacing) * 2);
}

.separator {
    margin-block-start: calc(var(--vertical-spacing) + var(--vertical-spacing));
    position: relative;
}

.separator::before {
    content: "";
    block-size: 1px;
    inline-size: 100%;
    position: absolute;
    inset-block-start: calc(0px - var(--vertical-spacing));
    inset-inline-start: 0;
    background-color: var(--dark);
    background-image: linear-gradient(90deg, #eee -15%, var(--dark), #eee 115%);
}
@media (prefers-color-scheme: dark) {
    .separator::before {
        background-color: var(--light);
        background-image: linear-gradient(90deg, var(--dark) -15%, var(--light), var(--dark) 115%);
    }
}

.link {
    --link-underline-thickness: .06em;
    --link-underline-offset: .2em;

    text-decoration-thickness: var(--link-underline-thickness);
    text-underline-offset: var(--link-underline-offset);
    text-decoration-skip-ink: none;
}
.link:hover {
    color: var(--black);
    text-decoration-thickness: calc(var(--link-underline-thickness) * 2);
}
@media (prefers-color-scheme: dark) {
    .link:hover {
        color: var(--white);
    }
}
.link:hover .inline-code {
    background-color: var(--near-black);
}

.usage-example-intro {
    margin-block-start: var(--vertical-spacing);
}

.footer {
    margin-block-start: calc(var(--vertical-spacing) * 2);
}

/* overrides */
.visually-hidden:not(:focus):not(:active) {
    inline-size: 1px !important;
    block-size: 1px !important; /* https://snook.ca/archives/html_and_css/hiding-content-for-accessibility */
    padding: 0 !important;
    border: 0 !important;
    overflow: hidden !important;
    position: absolute !important;
    white-space: nowrap !important; /* https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe */
    clip: rect(1px 1px 1px 1px) !important; /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
}

[disabled],
[disabled] * {
    cursor: not-allowed !important;
}

[hidden] {
    display: none !important;
}
