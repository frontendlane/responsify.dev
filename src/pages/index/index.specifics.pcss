/* TODO: responsify padding-left from 600px to 900px to be twice as wide */
.blockquote {
    display: inline-block; /* must be inline-block in order to have padding on the right hand side when horizontally scrolling on mobile */
    border-inline-start: calc(var(--horizontal-spacing) / 2) solid #3296fa;
    /* TODO: padding-inline should var(--horizontal-spacing) not .75em, except for padding-left which should be half of that because of border */
    /* TODO: maybe halve that vertical spacing?? */
    padding: var(--vertical-spacing) .75em;
    color: var(--light);
}
@media (prefers-color-scheme: dark) {
    .blockquote {
        color: inherit;
    }
}

.term {
    font-size: 1.35em;
}

.term-type {
    font-size: .75em;
}

.video {
    max-inline-size: 100%;
    border-radius: min(calc(0.345px + 0.517vw), 5px); /* https://responsify.dev - viewport lower bound: 320px; viewport upper bound: 900px; element lower bound: 2px; element upper bound: 5px; */
    margin-block-start: var(--vertical-spacing);
    outline: 1px solid white;
}
@media (prefers-color-scheme: dark) {
    .video {
        outline-color: var(--near-black);
    }
}

.q {
    font-style: italic;
}

ol {
    --ch-space: 0.4596ch;
    --ch-period: 0.455ch;
    --digit-ach: 0.959ch;

    counter-reset: counter-1;
    margin-block-start: var(--vertical-spacing);
    /* padding-inline: 25px; this works but doesn't ensure the padding will be good if font size changes */
    padding-inline-start: calc(var(--digit-ach) + var(--ch-period) + var(--ch-space) * 2);
}

ol > li {
    counter-increment: counter-1;
}
ol > li:not(:first-of-type) {
    margin-block-start: calc(var(--vertical-spacing) / 4);
}
ol > li::marker {
    content: counter(counter-1) "." " " " ";
}

ol ol {
    counter-reset: counter-2;
    margin-block-start: calc(var(--vertical-spacing) / 4);
    padding-inline-start: calc(var(--digit-ach) + var(--ch-period) + var(--ch-space) * 4);
}
@media (min-width: 75ch) {
    ol ol {
        padding-inline-start: calc(var(--digit-ach) + var(--ch-period) + var(--ch-space) * 8);
    }
}

ol ol > li {
    counter-increment: counter-2;
}
ol ol > li::marker {
    content: counter(counter-1) "." counter(counter-2) "." " " " ";
}

ol ol ol {
    counter-reset: counter-3;
}

ol ol ol > li {
    counter-increment: counter-3;
}
ol ol ol > li::marker {
    content: counter(counter-1) "." counter(counter-2) "." counter(counter-3) "." " " " ";
}

ol ol ol ol {
    counter-reset: counter-4;
}

ol ol ol ol > li {
    counter-increment: counter-4;
}
ol ol ol ol > li::marker {
    content: counter(counter-1) "." counter(counter-2) "." counter(counter-3) "." counter(counter-4) "." " " " ";
}

ol ol ol ol ol {
    counter-reset: counter-5;
}

ol ol ol ol ol > li {
    counter-increment: counter-5;
}
ol ol ol ol ol > li::marker {
    content: counter(counter-1) "." counter(counter-2) "." counter(counter-3) "." counter(counter-4) "." counter(counter-5) "." " " " ";
}

ol ol ol ol ol ol {
    counter-reset: counter-6;
}

ol ol ol ol ol ol > li {
    counter-increment: counter-6;
}
ol ol ol ol ol ol > li::marker {
    content: counter(counter-1) "." counter(counter-2) "." counter(counter-3) "." counter(counter-4) "." counter(counter-5) "." counter(counter-6) "." " " " ";
}

.example-div {
    --width: 90vw;

    inline-size: var(--width);
    margin-inline-start: calc((var(--width) - 100%) / 2 * -1);

    border-radius: var(--block-border-radius);
    padding: calc(var(--vertical-spacing) * 2) 0;
    display: flex;
    justify-content: center;

    background-image: repeating-linear-gradient(45deg, red 0, red 20px, orange 20px, orange 40px, yellow 40px, yellow 60px, green 60px, green 80px, blue 80px, blue 100px, indigo 100px, indigo 120px, violet 120px, violet 140px);
    background-color: var(--black);
    background-blend-mode: luminosity;
    background-attachment: fixed;
}
@media (prefers-color-scheme: dark) {
    .example-div {
        background-color: var(--light);
    }
}
@media (min-width: 900px) {
    .example-div ~ .example-div {
        --width: calc(3716.129px - 322.903vw); /* https://responsify.dev - parent lower bound: 900px; parent upper bound: 1024px; element lower bound: 90vw; element upper bound: 40vw; */
        background-blend-mode: normal;
    }
}
@media (min-width: 1024px) {
    .example-div {
        --width: 40vw !important;
        background-blend-mode: luminosity !important;
    }
}

.example-div::before {
    content: "width: 90%;";
    border-radius: var(--inline-border-radius);
    background-color: var(--code-background-dark);
    color: #ffa26b;
    font-family: monospace;
    outline: 1px solid var(--light);
    padding: calc(var(--vertical-spacing) / 2) var(--horizontal-spacing);
}
@media (prefers-color-scheme: dark) {
    .example-div::before {
        color: var(--code-color-dark);
    }
}
@media (min-width: 900px) {
    .example-div ~ .example-div::before {
        content: "width: calc(3716.129px - 322.903%);";
    }
}
@media (min-width: 1024px) {
    .example-div::before {
        content: "width: 40%;" !important;
    }
}

/* TODO: improve the copy for mobile users who cannot resize their browsers */
.resize::before {
    content: "Resize the browser up ‚¨ÜÔ∏è to see responsify in action.";
    content: "Resize the browser up ‚¨ÜÔ∏è to see responsify in action." / "Resize the browser up to see responsify in action.";
}
@media (min-width: 900px) {
    .resize::before {
        /* TODO: handle this with postcss */
        content: "Resize the browser to see responsify in action. ü¶Ñ";
        content: "Resize the browser to see responsify in action. ü¶Ñ" / "Resize the browser to see responsify in action.";
        white-space: pre-wrap;
    }
}
@media (min-width: 1024px) {
    .resize::before {
        content: "Resize the browser down ‚¨áÔ∏è to see responsify in action.";
        content: "Resize the browser down ‚¨áÔ∏è to see responsify in action." / "Resize the browser down to see responsify in action.";
    }
}

.form-element {
    margin-block-start: var(--vertical-spacing);
}

.list {
    margin-block-start: var(--vertical-spacing);
    padding-inline-start: var(--horizontal-spacing);
}

.list-item +:not(:first-of-type) {
    margin-block-start: calc(var(--vertical-spacing) / 2);
}

.form {
    position: relative; /* needed for :active, :focus-within but placed here because <select> doesn't open on first click otherwise */
    pointer-events: none;
}

.form :where(.label, .input, .select, .button, .output, .link) {
    pointer-events: all; /* no way to revert the cursor on form title. the cursor changed from the original "text" to now odd looking "default" */
}

/* TODO: think about this more deeply, do i just focus on the first input field with JS on page load?? */
/* .form:target, */
.form:active,
.form:focus-within {
    z-index: 1;
    background-color: var(--light);
    box-shadow: 0 0 0 calc(var(--horizontal-spacing) - var(--outline-width)) var(--light), 0 0 0 var(--horizontal-spacing) var(--dark), 0 0 0 12345vmax #eeeeee80; /* #eeeeee80 === var(--near-white) + alpha */
    border-radius: var(--block-border-radius);
}
@media (prefers-color-scheme: dark) {
    /* .form:target, */
    .form:active,
    .form:focus-within {
        background-color: var(--near-black);
        box-shadow: 0 0 0 calc(var(--horizontal-spacing) - var(--outline-width)) var(--near-black), 0 0 0 var(--horizontal-spacing) var(--light), 0 0 0 12345vmax #20202080; /* #20202080 === var(--dark) + alpha */
    }
}

.step-container {
    display: flex; /* display: flex; on <li> removes ::marker so a div inside the <li> is needed */
    align-items: flex-end;
    flex-wrap: wrap;
}

.label {
    margin-inline-end: 1.5ch; /* margin goes on label instead of input because of possible wrapping and we want to avoid margin on the new line */
}

.input {
    padding: 0 .25ch;
    color: var(--dark);
    background-color: var(--white);
    border: 1px solid #dadada;
}
@media (prefers-color-scheme: dark) {
    .input {
        color: var(--light);
        background-color: var(--black);
        /* TODO: add --input-border-color: #4d4d4d; */
        border-color: #4d4d4d;
    }
}
.input[disabled] {
    border-color: var(--black);
    opacity: .15;
}
@media (prefers-color-scheme: dark) {
    .input[disabled] {
        border-color: revert;
        opacity: .3;
    }
}
.input::placeholder {
    color: inherit;
    opacity: .15;
    font-style: italic;
}
@media (prefers-color-scheme: dark) {
    .input::placeholder {
        opacity: .3;
    }
}
.input[disabled]::placeholder {
    opacity: 1;
}

.css-property {
    --longest-css-property-length: 27ch;

    max-inline-size: var(--longest-css-property-length);
    flex-grow: 1;
}

.input[type="number"] {
    --number-size-limit: 4ch;
    --precision-separator: 1ch;
    --precision-digits: 2ch;
    --stepper-width: 25px;

    max-inline-size: calc(var(--number-size-limit) + var(--precision-separator) + var(--precision-digits) + var(--stepper-width));
    margin-inline-end: .25ch;
}

.flex-wrap-joiner {
    display: flex;
    align-items: flex-end;
    flex-wrap: wrap;
}

.select {
    font-family: monospace;
    padding-inline: .25ch;
    background-color: var(--white);
    color: var(--dark);
    border: 1px solid #dadada;
}
@media (prefers-color-scheme: dark) {
    .select {
        background-color: var(--black);
        color: var(--light);
        border-color: #4d4d4d;
    }
}

.select[disabled] {
    opacity: .3;
    border-color: revert;
}

.output {
    --notification-height: 1em;
    --notification-offset: .5em;

    display: block;
    text-align: center;
    position: relative;
    max-inline-size: 100%;
}

.output:not(:empty) {
    margin-block-start: calc(var(--vertical-spacing) + var(--notification-height) + var(--notification-offset) + var(--outline-width) + var(--outline-offset));
}

.notification {
    --arrow-size: 1em;
    --arrow-offset: var(--outline-offset);
    --arrow-pedestal: .25em;

    position: absolute;
    border-block-end: var(--arrow-pedestal) solid transparent;
    padding: 0 .5ch;
    inset-block-start: 0;
    inset-inline-start: 50%;
    transform: translate3d(-50%, calc((100% + var(--outline-offset) + var(--outline-width) + var(--arrow-offset) + var(--arrow-size) / 2) * -1), 0);
}
.notification:not(:empty) {
    border-block-end-color: currentColor;
}

.notification:not(:empty)::before {
    content: "";
    display: block;
    position: absolute;
    inset-block-end: calc(var(--arrow-pedestal) * -1);
    inset-inline-start: 50%;
    transform: translate3d(-50%, 100%, 0);
    background-color: currentColor;
    inline-size: var(--arrow-size);
    block-size: var(--arrow-size);
    clip-path: polygon(0 0, 100% 0, 50% 50%);
}

.kbd {
    padding-inline: .25ch;
    border-radius: var(--inline-border-radius);
    background-color: var(--code-background-dark);
    color: yellow;
}

.result {
    font-size: 1.5em;
}

.link:hover .inline-code {
    background-color: var(--near-black);
}

.offscreen {
    position: fixed;
    inset-block-end: 0;
    inset-inline-end: 0;
    /* TODO: is there an easier way to express these values that are safely outside the viewport?? */
    transform: translate3d(calc(100% + 100vw), calc(100% + 100vh), 0);
}

/* TODO: there's gotta be a better way to handle this */
.offscreen-nowrap.offscreen-nowrap > * {
    display: revert !important;
    white-space: nowrap;
}

.offscreen-reveal.offscreen-reveal > * {
    display: revert !important;
}

/* TODO: figure out the best place to keep this */
.table-container {
    overflow-x: auto;
}

table {
    min-width: 100%;
    border-collapse: collapse;
}

table * {
    word-break: normal;
}

thead {
    border-bottom: 2px solid #4d4d4d;
}

tbody {
    border-top: 2px solid #4d4d4d;
}

caption {
    font-size: calc(var(--golden-ratio) * 1em);
    font-weight: bold;
}

tbody > tr:nth-of-type(2n+1) {
    background-color: rgba(0 0 0 / .1);
}
@media (prefers-color-scheme: dark) {
    tbody > tr:nth-of-type(2n+1) {
        background-color: rgba(0 0 0 / .25);
    }
}

th,
td {
    border: 1px solid #4d4d4d;
    padding: calc(var(--vertical-spacing) / 4) calc(var(--horizontal-spacing) / 4);
}

th[colspan]:not([colspan=""]),
td[colspan]:not([colspan=""]) {
    text-align: center;
}
