---
import Heading from '../components/Heading/Heading.astro'
import Link from '../components/Link/Link.astro'
import TableOfContents, { headings } from '../components/TableOfContents/TableOfContents.astro'
import BrowserSupport from '../components/temp/BrowserSupport.astro'
import Code from '../components/temp/Code.astro'
import ComparisonTable from '../components/temp/ComparisonTable.astro'
import Dateline from '../components/temp/Dateline.astro'
import Examples from '../components/temp/Examples.astro'
import Footer from '../components/temp/Footer.astro'
import Form from '../components/temp/Form/Form.astro'
import SassFunction from '../components/temp/SassFunction.astro'
import Section from '../components/temp/Section.astro'
import Unorphan from '../components/temp/Unorphan.astro'
import Updates from '../components/temp/Updates.astro'
import Video from '../components/temp/Video.astro'
import classes from './Index.module.css'

import '../styles/reset.css'
import './Index.css'
import '../styles/overrides.css'

// TODO: inject this into package.json and manifest as well
const responsifyOneLiner = 'Responsify helps you smooth out layout jumps at breakpoints.'
---

<!DOCTYPE html>
<html lang="en-US">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>Responsify - Smooth out layout jumps at beakpoints</title>
		<meta name="description" content={responsifyOneLiner} />
	</head>
	<body>
		<main aria-labelledby={headings.h1.id}>
			<article aria-labelledby={headings.h1.id}>
				<Heading element={headings.h1.element} id={headings.h1.id} set:html={headings.h1.html} />
				<Dateline />

				<Section class="vertical-spacing-150-percent" heading={headings.h2_1}>
					<p class="vertical-spacing">
						Responsify is the name of my technique for smoothing out layout jumps at breakpoints. It uses the CSS
						<Code>calc()</Code>
						function to
						<em>fluidly</em>
						change
						<Code>width</Code>,
						<Code>margin</Code>,
						<Code>left</Code>, etc. so they match the neighboring breakpoint value. Read on to learn how to use
						it in your project.
					</p>
					<Video />
					<Updates />
				</Section>

				<Section class="vertical-spacing-150-percent" heading={headings.h2_2}>
					<TableOfContents headings={headings} />
				</Section>

				<Examples />

				<Form />

				<SassFunction />

				<BrowserSupport />

				<Section class="vertical-spacing-150-percent" heading={headings.h2_7}>
					<p class="vertical-spacing"
						>CSS locks originated as <Link
							href="https://tbrown.org/notes/2012/02/03/molten-leading-or-fluid-line-height/"
						>
							Molten leading
						</Link>. In the article that introduced the concept and in almost every example I came across CSS
						locks are used for controlling <Code>line-height</Code> and <Code>font-size</Code>, even though it
						works with many CSS properties.</p
					>
					<p class="vertical-spacing"
						>CSS locks and responsify are based on fundamentally the same logic/math and as such share many
						similarities. They both:</p
					>
					<ul class={classes.ul}>
						<li>work with CSS properties that accept a <Code>px</Code> value,</li>
						<li>don't work with properties that accept keyword value like <Code>visibility</Code>,</li>
						<li>don't work with properties that accept a unitless value like <Code>z-index</Code>.</li>
					</ul>
					<p class="vertical-spacing"
						>There are also a few differences, most notable are listed in the following table.</p
					>
					<ComparisonTable />
				</Section>

				<Section class="vertical-spacing-150-percent" heading={headings.h2_8}>
					<p class="vertical-spacing">
						There's a similar tool that can
						<Link href="https://andersriggelsen.dk/nonlinear/">
							generate <em>non-linear</em>
							<Code>calc()</Code> value
						</Link>.
					</p>
					<p class="vertical-spacing"
						>For more awesomeness, James Gilyead and Trys Mudford created <Link href="https://utopia.fyi/">
							"Utopia" design system
						</Link> where elements scale proportionally and fluidly. It's an unconventional approach that uses a whole
						lot of <Code>calc()</Code>, CSS variables, <Code>rem</Code> and
						<Code>vw</Code> relative units, all tied together with what seems to me as undecipherable math. Fascinating
						stuff. ðŸ§ </p
					>
				</Section>
			</article>
		</main>

		<Footer />

		<Unorphan />
	</body>
</html>
